# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

TEAMS_URL_FIREBASE = "https://outlook.office.com/webhook/0a2d4ed8-53f9-4d46-9bd6-54eb49c4322a@fdadce6e-7f5e-49db-8f22-6a87331a9135/IncomingWebhook/4145f7615a7e4e048cf2f27758716006/fd028c62-6d9b-4ca5-b1f1-7428542d0221"
TEAMS_URL_PLAYSTORE = "https://outlook.office.com/webhook/0a2d4ed8-53f9-4d46-9bd6-54eb49c4322a@fdadce6e-7f5e-49db-8f22-6a87331a9135/IncomingWebhook/290576635a8d4adca4eb625409585aec/fd028c62-6d9b-4ca5-b1f1-7428542d0221"


DESTINATION_FIREBASE = "firebase"
DESTINATION_PLAY_STORE = "play-store"

FLAVOR_PRODUCTION = "Prod"
FLAVOR_INTERNAL = "Uat"

FIREBASE_APP_ID = "1:404758864373:android:59e244bbf2d227790fc0bc"
FIREBASE_APP_ID_INTERNAL = "1:41754248425:android:55c6ac4eab9597e4ff9c78"

PACKAGE_NAME = "com.mol.molwallet"
PACKAGE_NAME_INTERNAL = "#{PACKAGE_NAME}.uat"

# eg: "group-a, group-b, group1, group2"
DEFAULT_FIREBASE_INVITATION_GROUPS = "razer-pay-internal-releases"

default_platform(:android)

platform :android do
  desc "Distribute Android app"

  # android_get_version_name(
  #   gradle_file: "buildSrc/src/main/java/Versions.kt" # optional
  # )

  # ENV["ANDROID_VERSION_NAME"] = lane_context[SharedValues::ANDROID_VERSION_NAME]
  # android_get_version_code(
  #     gradle_file: "buildSrc/src/main/java/Versions.kt" # optional
  # )
  # ENV["ANDROID_VERSION_CODE"] = lane_context[SharedValues::ANDROID_VERSION_CODE]

  # if ENV["BUILDKITE_BUILD_NUMBER"]
  #   ENV["ANDROID_VERSION_CODE"] = ENV["BUILDKITE_BUILD_NUMBER"]
  #   puts "Found BUILDKITE_BUILD_NUMBER in env, set ANDROID_VERSION_CODE from BUILDKITE_BUILD_NUMBER: #{ENV["ANDROID_VERSION_CODE"]}"
  # end

  ## TODO: configure the ANDROID_VERSION_CODE for CI, 
  ## because we will replace the versionCode for when building with CI

  lane :test do
    output_pattern = 'app/build/test-results/testProdReleaseUnitTest/TEST-*.xml'
    
    # We ignore exit code otherwise we wouldn't get to the actions below on test failure
    gradle(task: "testProdReleaseUnitTest")

    pretty_junit(file_pattern: output_pattern)
  end

  lane :distribute do |args|
    
    destination = args[:destination] || DESTINATION_FIREBASE
    flavor = args[:flavor] || FLAVOR_PRODUCTION
    case flavor
    when FLAVOR_PRODUCTION, FLAVOR_INTERNAL
      build(
        flavor: flavor,
        destination: destination,
      )
    else
      raise "Unsupported flavor: #{flavor}"
    end

    OUTPUT = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH] || 
      lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH] || 
      lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS] || 
      lane_context[SharedValues::GRADLE_ALL_AAB_OUTPUT_PATHS] || 
      "Unable to get OUTPUT from lane context"
    puts "OUTPUT - #{OUTPUT}"

    case destination
    when DESTINATION_FIREBASE
      firebase_distribution(
        flavor: flavor,
        tester_groups: args[:tester_groups] || DEFAULT_FIREBASE_INVITATION_GROUPS,
        tester_emails: args[:tester_emails] || nil,
      )
    when DESTINATION_PLAY_STORE
      playstore_distribution(
        flavor: flavor
      )
      # puts "Successfully build, but Play Store distribution is not implementated yet."
      # puts "Please temporary upload the aab via Google Play Console."
    else
      raise "Unsupported destination: #{destination}"
    end

    # announce(
    #   flavor: flavor,
    #   destination: destination,
    # )
  end
end

def git_changelog()

  if ENV["CI"] && ENV["BUILDKITE_META_RELEASE_NOTES"]
    return ENV["BUILDKITE_META_RELEASE_NOTES"]
  end  

  return changelog_from_git_commits(
    commits_count: 30,
    pretty: "[ %an ] - %s", # Optional, lets you provide a custom format to apply to each commit when generating the changelog text
    date_format: "short", # Optional, lets you provide an additional date format to dates within the pretty-formatted string
    match_lightweight_tag: false, # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
    merge_commit_filtering: "only_include_merges", # Optional, lets you filter out merge commits
    quiet: true,
  )
end

private_lane :build do |args|
  flavor = args[:flavor]
  destination = args[:destination]

  desc "Build application #{flavor}"

  
  case destination
  when DESTINATION_FIREBASE
    task = "assemble"
  when DESTINATION_PLAY_STORE
    task = "bundle"
  end

  is_ci = ENV["CI"] || "false"
  if is_ci.empty? || is_ci != "true"
    # CI will do clean checkout everytime, doesn't need to clean here
    gradle(
      task: "clean",
      print_command_output: false,
    )
  end

  gradle(
    task: task,
    flavor: flavor,
    build_type: "Release",
    flags: "--warning-mode all",
  )  
end

private_lane :firebase_distribution do |args|
  desc "Distribute to Firebase"

  flavor = args[:flavor]

  case flavor
  when FLAVOR_PRODUCTION
    app = FIREBASE_APP_ID
  when FLAVOR_INTERNAL
    app = FIREBASE_APP_ID_INTERNAL
  else
    # no-op
  end

  firebase_app_distribution(
    app: app,
    groups: args[:tester_groups],
    testers: args[:tester_emails],
    release_notes: git_changelog()
  )
end

private_lane :playstore_distribution do |args|
  desc "Distribute to PlayStore"

  flavor = args[:flavor]
  testers = nil

  json_key_data = Base64.decode64(ENV["GOOGLE_SERVICE_ACCOUNT_JSON_KEY_DATA_BASE64"])
  validate_play_store_json_key(
      json_key_data: json_key_data,
  )

  case flavor
  when FLAVOR_PRODUCTION
    package_name = PACKAGE_NAME
  when FLAVOR_INTERNAL
    package_name = PACKAGE_NAME_INTERNAL
    raise 'Internal is not supported for now, use "yarn firebase:internal"'
  else
    # no-op
  end

  supply(
    package_name: package_name,
    version_name: "#{ENV["ANDROID_VERSION_CODE"]} (#{ENV["ANDROID_VERSION_NAME"]})",    
    version_code: ENV["ANDROID_VERSION_CODE"],    
    track: "internal", # We upload to internal track and admin will promote manually
    json_key_data: json_key_data,
    # release_status: "halted",
    # rollout: "1.0",
    skip_upload_aab: false,
    skip_upload_apk: true, # We use Android App Bundle,    
    skip_upload_metadata: true,
    skip_upload_images: true,
    skip_upload_screenshots: true,
  )
end

private_lane :announce do |args|

  case args[:flavor]
  when FLAVOR_PRODUCTION
    title = "Razer Pay"
    theme_color = "44D62C"
  when FLAVOR_INTERNAL
    title = "Razer Pay UAT"
    theme_color = "FFB300"
  else
    # no-op
  end

  case args[:destination]
  when DESTINATION_FIREBASE
    teams_url = TEAMS_URL_FIREBASE
    distrubutor = "Firebase"
  when DESTINATION_PLAY_STORE
    teams_url = TEAMS_URL_PLAYSTORE
    distrubutor = "Play Store Internal Track"
  end

  teams(
    title: title,
    message: "Successfully distrubuted to #{distrubutor}!",
    theme_color: theme_color,
    facts:[
      {
        "name"=>"Platform",
        "value"=>"Android"
      },
      {
        "name"=>"Version",
        "value"=>ENV["ANDROID_VERSION_NAME"]
      },
      {
        "name"=>"Build",
        "value"=>ENV["ANDROID_VERSION_CODE"]
      }
    ],
    teams_url: teams_url
  )
end
